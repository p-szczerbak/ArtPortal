---
swagger: "2.0"
info:
  description: This is an Art Portal API
  version: 1.0.0
  title: Art Portal
  termsOfService: http://swagger.io/terms/
  contact:
    email: paulina@paula.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: artportal.swagger.io
basePath: /v2
tags:
- name: workOfArt
  description: Everything about available in store works of art
- name: store
  description: Access to ArtPortal orders
- name: portfolio
  description: Operations about portfolios
- name: post
  description: Operations about posts
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
- https
- http
paths:
  /workOfArt:
    post:
      tags:
      - workOfArt
      summary: Add a new work of art to the store
      description: Available only for logged in users.
      operationId: addWorkOfArt
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Work of art object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/WorkOfArt'
      responses:
        200:
          description: Successfully added
        405:
          description: Invalid input
    put:
      tags:
      - workOfArt
      summary: Update an existing work of art
      description: Available only for logged in users.
      operationId: updateWorkOfArt
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Work of art new object that should be put in place of previous work of art object to the store
        required: true
        schema:
          $ref: '#/definitions/WorkOfArt'
      responses:
        200:
          description: Successfully updated
        400:
          description: Invalid ID supplied
        404:
          description: Work of art not found
        405:
          description: Validation exception
  /workOfArt/{workOfArtId}:
    get:
      tags:
      - workOfArt
      summary: Find work of art by ID
      description: Returns a single work of art
      operationId: getWorkOfArtById
      produces:
      - application/json
      parameters:
      - name: workOfArtId
        in: path
        description: ID of work of art to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Work of art not found
    post:
      tags:
      - workOfArt
      summary: Updates a work of art in the store with form data
      description: ""
      operationId: updateWorkOfArtWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: workOfArtId
        in: path
        description: ID of work of art that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the work of art
        required: false
        type: string
      responses:
        405:
          description: Invalid input
    delete:
      tags:
      - workOfArt
      summary: Deletes a work of art
      description: ""
      operationId: deleteWorkOfArt
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: workOfArtId
        in: path
        description: Work of art id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Work of art not found
  /workOfArt/{workOfArtId}/uploadImage:
    post:
      tags:
      - workOfArt
      summary: uploads an image
      description: ""
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: workOfArtId
        in: path
        description: ID of work of art to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
  /store/allWorksOfArt:
    get:
      tags:
      - store
      summary: Returns all works of art available in store
      description: Available for all users
      operationId: getAllWorksOfArt
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a work of art
      description: ""
      operationId: placeOrder
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the work of art
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: ID of the order
        required: true
        type: integer
        maximum: 10
        minimum: 1
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /portfolio:
    post:
      tags:
      - portfolio
      summary: Adds a new portfolio
      description: Available for logged in users
      operationId: addPortfolio
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
        405:
          description: an issue
  /portfolio/all:
    get:
      tags:
      - portfolio
      summary: Returns all portfolios
      description: Available for some users
      operationId: getAllPortfolios
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
        404:
          description: Portfolios not found
  /portfolio/{portfolioId}:
    get:
      tags:
      - portfolio
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      operationId: getPortfolioById
      produces:
      - application/json
      parameters:
      - name: portfolioId
        in: path
        description: ID of portfolio that should be viewed
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Portfolio'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    put:
      tags:
      - portfolio
      summary: Update portfolio by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: updatePortfolio
      produces:
      - application/json
      parameters:
      - name: portfolioId
        in: path
        description: ID of the portfolio that needs to be updated. Available only for the portfolios's author.
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Portfolio not found
    delete:
      tags:
      - portfolio
      summary: Delete portfolio by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: deletePortfolio
      produces:
      - application/json
      parameters:
      - name: portfolioId
        in: path
        description: ID of the post that needs to be deleted. Available only for the post's author.
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Post not found
  /post:
    post:
      tags:
      - post
      summary: Adds a new post
      description: Available for logged in users
      operationId: addPost
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
        405:
          description: an issue
  /post/all:
    get:
      tags:
      - post
      summary: Returns all works of art available in store
      description: Available for all users
      operationId: getAllPosts
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
  /post/{postId}:
    get:
      tags:
      - post
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      operationId: getPostById
      produces:
      - application/json
      parameters:
      - name: postId
        in: path
        description: ID of post that should be returned
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Post'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - post
      summary: Delete post by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: deletePost
      produces:
      - application/json
      parameters:
      - name: postId
        in: path
        description: ID of the post that needs to be deleted. Available only for the post's author.
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Post not found
  /user/register:
    post:
      tags:
      - user
      summary: Create user
      description: This can be done by all users.
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
        400:
          description: user already exist
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
definitions:
  Portfolio:
    type: object
    properties:
      id:
        type: integer
        format: int64
      description:
        type: string
      authorId:
        type: integer
        format: int64
    xml:
      name: Post
  Post:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      authorId:
        type: integer
        format: int64
      artistId:
        type: integer
        format: int64
        description: ID of artist who liked the post
    xml:
      name: Post
  WorkOfArt:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        description: type of work of art, e.g. painting, drawing, sculpture etc.
      name:
        type: string
      description:
        type: string
      authorId:
        type: integer
        format: int64
    xml:
      name: WorkOfArt
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      workOfArtId:
        type: integer
        format: int64
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
        - placed
        - approved
        - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      address:
        type: string
    xml:
      name: User
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
