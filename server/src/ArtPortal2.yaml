swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger Art Portal
  description: A sample API that demonstrates Swagger-Express-Middleware features

consumes:
  - application/json
produces:
  - application/json

definitions:
  workOfArt:
    required:
      - name
      - description
      - image
      - author
    properties:
      name:
        type: string
        minLength: 4
        pattern: "^[a-zA-Z0-9- ]+$"
      type:
        type: string
        enum: [sculpture, painting, drawing, other]
      address:
        $ref: "#/definitions/address"
      author:
        $ref: "#/definitions/author"
      tags:
        type: array
        uniqueItems: true
        items:
          type: string
          minLength: 1

  author:
    required:
      - name
    properties:
      name:
        type: string
        minLength: 1

  address:
    properties:
      street:
        type: string
        minLength: 1
      city:
        type: string
        minLength: 1
      state:
        type: string
        minLength: 2
        maxLength: 2
        pattern: "^[A-Z]+$"
      zipcode:
        type: integer
        minimum: 10000
        maximum: 99999

  art-filters:
    - name: tags
      in: query
      description: Filters worksOfArt by one or more tags
      required: false
      type: array
      items:
        type: string
      uniqueItems: true
      collectionFormat: csv
    - name: type
      in: query
      description: Filters worksOfArt by type (dog, cat, or bird)
      required: false
      type: string
      enum: [sculpture, painting, drawing, other]
    - name: address.city
      in: query
      description: Filters worksOfArt by city
      required: false
      type: string
    - name: address.state
      in: query
      description: Filters worksOfArt by state
      required: false
      type: string
    - name: address.zipcode
      in: query
      description: Filters worksOfArt by zip code
      required: false
      type: integer
    - name: author.name
      in: query
      description: Filters worksOfArt by veterinarian name
      required: false
      type: string
    - name: author.address.city
      in: query
      description: Filters worksOfArt by veterinarian city
      required: false
      type: string
    - name: author.address.state
      in: query
      description: Filters worksOfArt by veterinarian state
      required: false
      type: string
    - name: author.address.zipcode
      in: query
      description: Filters worksOfArt by veterinarian zip code
      required: false
      type: integer

parameters:
  artName:
    name: artName
    in: path
    description: Name of the pet
    required: true
    type: string

paths:
  /worksOfArt:
    get:
      description: Returns all worksOfArt, optionally filtered by one or more criteria
      operationId: findWorksOfArt
      parameters:
        $ref: '#/definitions/art-filters'
      responses:
        default:
          description: Returns the matching worksOfArt
          schema:
            type: array
            items:
              $ref: "#/definitions/workOfArt"
          headers:
            last-modified:
              type: string
              description: The date/time that a pet was last modified

    delete:
      description: Deletes all worksOfArt, optionally filtered by one or more criteria
      operationId: deleteWorksOfArt
      parameters:
        $ref: '#/definitions/art-filters'
      responses:
        default:
          description: Returns the worksOfArt that were deleted
          schema:
            type: array
            items:
              $ref: "#/definitions/workOfArt"

    post:
      description: Creates a new pet in the store
      operationId: addWorkOfArt
      parameters:
        - name: pet
          in: body
          description: The pet to add to the store
          required: true
          schema:
            $ref: "#/definitions/workOfArt"
      responses:
        201:
          description: Returns the newly-added pet
          schema:
            $ref: "#/definitions/workOfArt"
          headers:
            Location:
              type: string
              description: The URL of the newly-added pet

  /worksOfArt/{artName}:
    parameters:
      - $ref: "#/parameters/artName"

    get:
      description: Returns a pet by name
      operationId: findPetByName
      responses:
        default:
          description: Returns the pet data
          schema:
            $ref: "#/definitions/workOfArt"
          headers:
            last-modified:
              type: string
              description: The date/time that the pet was last modified

    delete:
      description: Deletes a single pet based on the name supplied
      operationId: deletePet
      responses:
        default:
          description: Returns the pet that was deleted
          schema:
            $ref: "#/definitions/workOfArt"

    patch:
      description: Updates a pet by name
      parameters:
        - name: pet
          in: body
          description: The updated pet info
          required: true
          schema:
            $ref: "#/definitions/workOfArt"
      responses:
        default:
          description: Returns the updated pet data
          schema:
            $ref: "#/definitions/workOfArt"

  /worksOfArt/{artName}/photos:
    parameters:
      - $ref: "#/parameters/artName"

    post:
      description: Upload a new pet photo
      operationId: addPetPhoto
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: formData
          description: The photo ID (generated automatically)
          type: integer
          format: int32
          minimum: 1
        - name: label
          in: formData
          description: A label for the photo
          required: true
          type: string
          minLength: 1
        - name: description
          in: formData
          description: An optional description of the photo
          type: string
        - name: photo
          in: formData
          description: The pet photo
          required: true
          type: file
          minLength: 1
          maxLength: 5000000  # ~5MB
      responses:
        default:
          description: Returns the photo information
          schema:
            properties:
              id:
                type: integer
                format: int32
                description: The auto-generated photo ID
              label:
                type: string
              description:
                type: string
              photo:
                type: object
                description: Information about the photo (size, file name, etc.)
          headers:
            Location:
              type: string
              description: The URL of the newly-added photo

    get:
      description: Get a list of the photos for a pet
      responses:
        200:
          description: Returns the list of photos
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  format: int32
                  description: The auto-generated photo ID
                label:
                  type: string
                description:
                  type: string
                photo:
                  type: object
                  description: Information about the photo (size, file name, etc.)

  /worksOfArt/{artName}/photos/{id}:
    parameters:
      - $ref: "#/parameters/artName"
      - name: id
        in: path
        description: The ID of the photo
        required: true
        type: integer
        format: int32

    get:
      description: Gets a pet photo
      operationId: getPetPhoto
      produces:
        - image/jpeg
        - image/gif
        - image/png
        - image/bmp
      responses:
        default:
          description: Returns the pet photo
          schema:
            type: file

    delete:
      description: Deletes a pet photo
      operationId: deletePetPhoto
      responses:
        default:
          description: The photo was deleted successfully

  /:
    get:
      produces:
        - text/html
      responses:
        default:
          description: The Swagger Pet Store homepage :)
          schema:
            type: file
            default:
              $ref: "index.html"
